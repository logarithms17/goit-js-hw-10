{"mappings":"YAAA,IAAMA,EAAW,+BACXC,EAAU,wEAYT,SAASC,EAAgBC,GAC/B,OAAOC,MAAM,GAAqCC,OAAlCL,EAAS,2BAA8CK,OAArBJ,EAAQ,eAAqBI,OAARF,IAAWG,MAAK,SAACC,GACvF,GAAKA,EAAIC,GAGR,OAAOD,EAAIE,OAFX,MAAM,IAAIC,MAAMH,EAAII,O,ICdvB,IAAMC,EAAgBC,SAASC,cAAc,iBACvCC,EAAYF,SAASC,cAAc,aACnCE,EAAWH,SAASC,cAAc,WAClCG,EAAUJ,SAASC,cAAc,UAuDvC,SAASI,IAERD,EAAQE,UAAUC,OAAO,aAGzBR,EAAcO,UAAUE,IAAI,Y,CA1D7BJ,EAAQE,UAAUE,IAAI,aACtBT,EAAcO,UAAUE,IAAI,aDJpBjB,MAAM,GAA8BC,OAA3BL,EAAS,oBAA0BK,OAARJ,IAAWK,MAAK,SAACC,GAC3D,GAAKA,EAAIC,GAGR,OAAOD,EAAIE,OAFX,MAAM,IAAIC,MAAMH,EAAII,O,ICQpBL,MAAK,SAACgB,GACNN,EAASG,UAAUI,QAAQ,SAAU,aAErC,IAAIC,EAAgBF,EAAKG,KAAI,SAAAC,G,IAAGC,EAAID,EAAJC,KAAMC,EAAEF,EAAFE,GACrC,MAAO,iBAAuBvB,OAANuB,EAAG,KAAQvB,OAALsB,EAAK,Y,IAGpCf,EAAciB,mBAAmB,YAAaL,GAC9CZ,EAAcO,UAAUC,OAAO,Y,IAE/BU,MAAMZ,GAOTN,EAAcmB,iBAAiB,UAAU,SAACC,GAGzChB,EAASG,UAAUI,QAAQ,YAAa,UAOxCrB,EADc8B,EAAEC,OAAOC,OAErB5B,MAAK,SAACgB,GACN,IAAwBa,EAAAb,EAAK,GAArBc,EAAgBD,EAAhBC,IACmCC,EADnBF,EAAXG,OACqC,GAA1CX,EAAmCU,EAAnCV,KAAMY,EAA6BF,EAA7BE,YAAaC,EAAgBH,EAAhBG,YAE3BzB,EAAU0B,UAAY,4BAGHpC,OAFE+B,EAAI,uFAGP/B,OADCsB,EAAK,8BAENtB,OADAkC,EAAY,6BACAlC,OAAZmC,EAAY,sCAI9BxB,EAASG,UAAUE,IAAI,Y,IAEvBS,MAAMZ,E","sources":["src/cat-api.js","src/index.js"],"sourcesContent":["const BASE_URL = \"https://api.thecatapi.com/v1\";\nconst API_KEY = \"live_5rAQ7csonVmICadMJLitRjGvxheCnEeD68VfxPM2NiqtsgMBFUzoHLoZaiI6RGcV\";\n\nexport function fetchBreeds() {\n\treturn fetch(`${BASE_URL}/breeds?api_key=${API_KEY}`).then((res) => {\n\t\tif (!res.ok) {\n\t\t\tthrow new Error(res.status);\n\t\t} else {\n\t\t\treturn res.json();\n\t\t}\n\t});\n}\n\nexport function fetchCatByBreed(breedId) {\n\treturn fetch(`${BASE_URL}/images/search?api_key=${API_KEY}&breed_ids=${breedId}`).then((res) => {\n\t\tif (!res.ok) {\n\t\t\tthrow new Error(res.status);\n\t\t} else {\n\t\t\treturn res.json();\n\t\t}\n\t});\n}\n","import { fetchBreeds, fetchCatByBreed } from \"./cat-api\";\n\nconst breedSelectEl = document.querySelector(\".breed-select\");\nconst catInfoEl = document.querySelector(\".cat-info\");\nconst loaderEl = document.querySelector(\".loader\");\nconst errorEl = document.querySelector(\".error\");\n\nerrorEl.classList.add(\"is-hidden\"); //hide the error message\nbreedSelectEl.classList.add(\"is-hidden\"); // hide the select tag during loading\n\n//CREATE THE OPTIONS\nfunction chooseBreed() {\n\t\n\tfetchBreeds()\n\t\t.then((data) => { //fetching data using .then\n\t\t\tloaderEl.classList.replace(\"loader\", \"is-hidden\"); //hide loading message once successful fetching of data\n\n\t\t\tlet optionsMarkup = data.map(({ name, id }) => { // loops the entire data from fetched data and using destructure to get the specific info needed which is name and id\n\t\t\t\treturn `<option value=${id}>${name}</option>`; //creates an elemeent option with the info that was fetched\n\t\t\t\t//<option value={catId} >Cat Name</option>\n\t\t\t});\n\t\t\tbreedSelectEl.insertAdjacentHTML(\"beforeend\", optionsMarkup); // added the created option elements stored in optionsMarkup to the select element with a variable breedSelectEl\n\t\t\tbreedSelectEl.classList.remove(\"is-hidden\"); // unhide the select tag after all the fetching process\n\t\t})\n\t\t.catch(onError); // unhide error message when failed in fetching data\n}\n\nchooseBreed(); //calls the function chooseBreed\n\n\n\nbreedSelectEl.addEventListener(\"change\", (e) => { //addEventListener functions when selecting an option\n\t//show loader while loading.\n\n\tloaderEl.classList.replace(\"is-hidden\", \"loader\"); // loading message appears after selecting an option of breed type. \n\n\t//hide select element and cat info while loading.\n\n\t// catInfoEl.classList.add(\"is-hidden\"); // this is not needed because catinfo is still not yet existed during this time\n\n\tlet breedId = e.target.value; // this targets the value of the selected option or breed of cat\n\tfetchCatByBreed(breedId) //using the data of the selected option or cat breed\n\t\t.then((data) => { //using .then to fetch the data of the cat breed\n\t\t\tconst { url, breeds } = data[0]; // choose only the url and breed from the array data of index[0]\n\t\t\tconst { name, description, temperament } = breeds[0]; //chose only the name, description and temperament from the array of breeds with the index[0]\n\n\t\t\tcatInfoEl.innerHTML = ` \n            <img src='${url}' alt='{name}' width=\"400\"/>\n            <div class='box'>\n                <h2>${name}</h2>\n                <p>${description}</p>\n                <p>${temperament}</p>\n            </div>\n        `; // this creates a markup of html that is inserted in the element div with the class of cat-info that is stored in catInfoEl\n\t\t\t// catInfoEl.classList.remove(\"is-hidden\");\n\t\t\tloaderEl.classList.add(\"is-hidden\"); // loading message is hidden after successfully fetching the data\n\t\t})\n\t\t.catch(onError); //shows error message once fetching failed\n});\n\nfunction onError() {\n\t//Show error message\n\terrorEl.classList.remove(\"is-hidden\"); // unhides the error message once fetching failed\n\n\t//hide select element\n\tbreedSelectEl.classList.add(\"is-hidden\"); //select tag is hidden when there is an error\n}\n"],"names":["$ae0c329fb0fb36dc$var$BASE_URL","$ae0c329fb0fb36dc$var$API_KEY","$ae0c329fb0fb36dc$export$57b7d3a597416aa2","breedId","fetch","concat","then","res","ok","json","Error","status","$b8f9b7833fa37166$var$breedSelectEl","document","querySelector","$b8f9b7833fa37166$var$catInfoEl","$b8f9b7833fa37166$var$loaderEl","$b8f9b7833fa37166$var$errorEl","$b8f9b7833fa37166$var$onError","classList","remove","add","data","replace","optionsMarkup","map","param","name","id","insertAdjacentHTML","catch","addEventListener","e","target","value","ref","url","ref1","breeds","description","temperament","innerHTML"],"version":3,"file":"index.60574681.js.map"}